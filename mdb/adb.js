
/*
 * 2017 0618
 * changed the data structure of value records
 * top level records have no parentid
 * sub level records have parentid.
 */


var MongoClient = require('mongodb').MongoClient;

var Promise = require("bluebird");


//var gensamp = require("./gensamp.js");

var p = console.log;


// Connection URL
var dburl = 'mongodb://localhost:27017/ggsys';



function get_value_collection(){
    //var _db   = null; //d
    //var _coll = null;

    var o = {
        db: null,
        collection: null,

        'getCollection': getCollection,
        'close': close
    }

    function connect(callback){
        if(typeof callback === 'function'){
            MongoClient.connect(dburl, function(err, db) {
                if(err) return callback(err);

                o.db         = db;
                o.collection = db.collection('value');
                return callback(null, o.collection);
            });
        }

        return MongoClient.connect(dburl);
    }

    function _reuseCollection(callback){
        if(o.collection !== null){
            return callback(null, o.collection);
        }else{
            return connect(callback);
        }
    }

    /*
     * promised get collection OR callback if provided.
     */
    function fetchCollection(callback){
        if(callback) return getCollection(callback);

        return new Promise((resolve, reject)=>{
            getCollection(function(err, coll){
                if(err) return reject(err);

                resolve(coll);
            });
        });
    }
    //o.fetchCollection = fetchCollection; //d


    function getCollection(callback){
        if(typeof callback === 'function'){
            return _reuseCollection(callback);
        }

        return fetchCollection();
    }


    function close(callback){
        o.db.close(callback);
    }


    return o;
}

//
//function get_one_value_rec(callback){
//    valueCollection(function(err, col){
//        if(err) return callback(err);
//
//        col.findOne({parentid: {$exists: false}}, callback);
//    });
//}
//


const objValueColl = get_value_collection();
module.exports.VCObj = objValueColl;

//d hide it?
module.exports.get_value_collection = get_value_collection;
//module.exports.get_one_value_rec = get_one_value_rec;


// checkings 



///*
// * check to insert one sample data, it's value record,
// * random words generated by reading the 'shawshank redemption'
// */
//function insertOne(){
//    gensamp.genSample(function(err, sam){
//        p(sam, err);
//
//        valueCollection(function(err, vcoll){
//            vcoll.insertOne(sam, function(err, what){
//                p(Object.keys(what), err);
//            });
//        });
//    });
//}
//
//function insert_one_sample_value_rec(callback){
//    gensamp.genSample(function(err, sam){
//        p(sam, err);
//
//        valueCollection(function(err, vcoll){
//            vcoll.insertOne(sam, callback);
//        });
//    });
//}
//

//
//function checkInsert(){
//    for(var i = 0; i<10; i++){
//        insert_one_sample_value_rec(function(){});
//    }
//}
//
//function checkGetOne(){
//    get_one_value_rec(function(err, what){
//        p(what, err);
//    });
//}
//


if(require.main === module){

    //insertOne();
    //checkInsert();

    checkGetOne();

    setTimeout(()=>{
        process.exit();
    }, 3000);
}
